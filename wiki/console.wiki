OpenAssembler have a console mode this is the most basic interface for oas.
I suggest to start with this one, and than later you can open up everything else.

You can start the oas console like this:
{{{
OpenAssembler -m console
}}}
or
{{{
python OpenAssembler.py -m console
}}}


then you will get this prompt:
{{{
OpenAssembler--->
}}}

After some time (quite soon) you will get a message from the server, like this one:
{{{
OpenAssembler Server started at 172.18.58.83:23345 !
}}}

It is because the server is automatically started with the console, and it was indicateing that messages are accepted over the remote console.


==Console commands==

Console is a very important tool for OpenAssembler! You can reach every tool and command with simply typing the proper command after the prompt. You can open, save, create nodes, run them open, a gui element... everything you want and you ever need.

Here are the list of the commands:

 [exit]
 [list]
 [count]
 [create]
 [delete]



-----------------------------------------------------------------------------------------

===list <type> <elementfilter>===
  It will list you the elements with the given type filtered by elementfilter
  The types can be the following:
  # nodetype
  # scene
  # connections
  # variables

Examples:
{{{
list scene mul
}}}
This will list you all the nodes in the scene which ones name contains the part: "mul"
{{{
list connections mult_01
}}}
This will list you all the connections where mult_01 is presented

Shortcuts: 
  * *ls* list all the nodes in the scene
  * *lc* list all the connections in the scene
  * *ln* list all the nodetypes in the scene

-----------------------------------------------------------------------------------------

===count <type>===
   This will count the elements in the scene. 
   Type can be:
  # nodetypes
  # scene
  # connections

-----------------------------------------------------------------------------------------

===create <nodetype>===
   It will create a node for you with the given parameter. The node will have a unique name, you can change it later of course

Example:
{{{
create mult
}}}

This will create you a node named something like: mult345234, so if you will press ls then it will listy you this beauty node...

Shortcut:
   * *cr* same like the full command cr <something>

-----------------------------------------------------------------------------------------

===delete <type> <name>===
   This will delete the given name of object from the given type. If you delete a node which have connections, than the connections will be deleted automatically of course.