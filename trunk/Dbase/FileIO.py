######################################################################################
#
#  OpenAssembler V2
#  Owner: Laszlo Mates
#  Email: laszlo.mates@gmail.com
#  Date: 2008.08.21
#
######################################################################################

import os
import sys
from Dbase.Data_handler import oas_data_handler

######################################################################################################################################
#
# This modeule is handling the file io operations
# mode=0 is a silent mode mode=1 is normal mode
# imputs: 0. command (not important) 1. extension (san, oas,...) 2. path
# oas and san files are identical ones the difference is just a header and the extension
# other file formats can be implemented if needed
#
######################################################################################################################################

class oas_fileio(oas_data_handler):

#######################################################################################################################
# save file module
#######################################################################################################################

	def oas_file_save(self,mode="silent",filename="",filetype="oas"):
		if filename!="" and filetype!="":
			if str(filetype)=="oas" or str(filetype)=="san":
				if os.path.exists(os.path.dirname(str(filename))):
					
					result=""
					if str(filetype)=="oas":
						result='''##OpenAssembler file
#
# Generated by OpenAssembler v2
#				
'''
					if str(filetype)=="san":
						result='''##SwissArmyNetwork
#
# Generated by OpenAssembler v2
#				
'''
					result+="define\n{\n"
					result+="\tname "+str(os.path.basename(str(filename)).split(".")[0])+"\n"
					if str(self.oas_scene_setup['endnode'])=="":
						result+="\tend "+str(self.oas_last_node_created)+"\n"
					else:
						result+="\tend "+str(self.oas_scene_setup['endnode'])+"\n"
					result+="}\n\n"
					
					for nds in self.oas_rt.keys():
						result+="node "+str(self.oas_rt[nds]['nodetype'])+"\n{\n"
						result+="\tname "+str(self.oas_rt[nds]['name'])+"\n\n"
						for inps in self.oas_rt[nds]['inputs'].keys():
							result+="\t"+str(inps)+" \""+str(self.oas_rt[nds]['inputs'][str(inps)]['value'])+"\"\n"
						result+="}\n\n"
					
					result+="connection\n{\n"
					for cns in self.oas_rt_connections.keys():
						result+="\t"+str(self.oas_rt[str(self.oas_rt_connections[cns]['out_node'])]['name'])+"."+str(self.oas_rt_connections[cns]['out_value'])+" "+str(self.oas_rt[str(self.oas_rt_connections[cns]['in_node'])]['name'])+"."+str(self.oas_rt_connections[cns]['in_value'])+"\n"
					result+="}\n\n"
					
					result+="scene_settings\n{\n"
					for stn in self.oas_scene_setup.keys():
						result+="\t"+str(stn)+" "+str(self.oas_scene_setup[stn])+"\n"
					result+="}\n\n"
					
					file_save=open(str(filename),"w")
					file_save.write(result)
					file_save.close()
					if mode=="normal":
						print "File saved."
					return str(filename)
				else:
					if mode=="normal":
						print "Wrong path."
					else:
						return 0
			#elif....
			else:
				if mode=="normal":
					print "Wrong filetype."
				else:
					return 0
		else:
			if mode=="normal":
				print "Wrong parameters."
			else:
				return 0
		
#######################################################################################################################
# file open module
#######################################################################################################################
		
	def oas_file_open(self,mode="silent",filename="",filetype="oas"):
		if filename!="" and filetype!="":
			if str(filetype)=="oas" or str(filetype)=="san":
				if os.path.exists(str(filename)):
					files=open(str(filename),"r")
					readed_content=files.read()
					files.close()
					self.oas_Startup()
					try:
						definepart=str(readed_content.split("define\n{\n")[1].split("}\n")[0]).strip().split("\n")
						for lns in definepart:
							if str(lns.strip().lstrip().split()[0])=="end":
								self.oas_scene_setup['endnode']=str(lns.strip().lstrip().split()[1])
					except:
						if mode=="normal":
							print "Wrong file content..."
						return 0
					
					try:	
						settingspart=str(readed_content.split("scene_settings\n{\n")[1].split("}\n")[0]).strip().split("\n")		
						for lns in settingspart:
							try:
								self.oas_scene_setup[str(lns.strip().lstrip().split()[0])]=str(lns.strip().lstrip().split()[1])
							except:
								self.oas_scene_setup[str(lns.strip().lstrip().split()[0])]=""
					except:
						if mode=="normal":
							print "Wrong file content..."
						return 0
					
					ndlist=readed_content.split("\nnode ")
					for x in range(1,len(ndlist)):
						nodetype=ndlist[x].split("}\n")[0].strip().lstrip().split("\n")[0].strip()
						
						if self.oas_node_list.has_key(str(nodetype)):
							iner=ndlist[x].split("}\n")[0].strip().lstrip().split("\n",1)[1].split("{\n")[1].strip().lstrip().split("\n")
							nodename=""
							iss=[]
							for ln in iner:
								if ln.strip().lstrip().split()==[]:
									pass
								else:
									if ln.strip().lstrip().split()[0]=="name":
										nodename=ln.strip().lstrip().split()[1]
									else:
										iss.append([ln.strip().lstrip().split()[0],ln.strip().lstrip().split(" ",1)[1]])
							creatednode=self.oas_data_create(mode,nodetype=str(nodetype))[0]
							if creatednode==0:
								if mode=="normal":
									print "Pronlem with: "+str(nodetype)
							else:
								if nodename!="":
									renamereturn=self.oas_data_rename(mode,old=creatednode,new=nodename)
									if renamereturn==0:
										if mode=="normal":
											print "Problem during the node creation..."
										nodename=creatednode
								for issl in iss:
									setret=self.oas_data_set(mode,nodevalue=str(nodename+"."+issl[0]),value=issl[1].lstrip("\"").strip("\""))
									if setret==0:
										if mode=="normal":
											print "Problem with "+str(nodename+"."+issl[0])
						else:
							if mode=="normal":
								print "Unknown nodetype: "+str(nodetype)+" !!!"


					
										
					try:	
						conpart=str(readed_content.split("connection\n{\n")[1].split("}\n")[0]).strip().split("\n")		
						for lns in conpart:
							cret=self.oas_data_connect(mode,from_variable=str(lns.strip().lstrip().split()[0]),to_variable=str(lns.strip().lstrip().split()[1]))      
							if cret==False:
								if mode=="normal":
									print "Problem when connectiong nodes."
					except:
						if mode=="normal":
							print "Wrong file content..."
						return 0
					
					self.oas_save_filename=str(filename)
					return str(filename)
				else:
					if mode=="normal":
						print "Wrong path."
					else:
						return 0
			#elif....
			else:
				if mode=="normal":
					print "Wrong filetype."
				else:
					return 0
		else:
			if mode=="normal":
				print "Wrong parameters."
			else:
				return 0

