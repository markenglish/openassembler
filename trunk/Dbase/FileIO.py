######################################################################################
#
#  OpenAssembler V2
#  Owner: Laszlo Mates
#  Email: laszlo.mates@gmail.com
#  Date: 2008.08.21
#
######################################################################################

import os
import sys
from Dbase.Data_handler import oas_data_handler

######################################################################################################################################
#
# This modeule is handling the file io operations
# mode=0 is a silent mode mode=1 is normal mode
# imputs: 0. command (not important) 1. extension (san, oas,...) 2. path
# oas and san files are identical ones the difference is just a header and the extension
# other file formats can be implemented if needed
#
######################################################################################################################################

class oas_fileio(oas_data_handler):

#######################################################################################################################
# save file module
#######################################################################################################################

	def oas_file_save(self,mode,inputs):
		if len(inputs)>2:
			if str(inputs[1])=="oas" or str(inputs[1])=="san":
				if os.path.exists(os.path.dirname(str(inputs[2]))):
					
					result=""
					if str(inputs[1])=="oas":
						result='''##OpenAssembler file
#
# Generated by OpenAssembler v2
#				
'''
					if str(inputs[1])=="san":
						result='''##SwissArmyNetwork
#
# Generated by OpenAssembler v2
#				
'''
					result+="define\n{\n"
					result+="\tname "+str(os.path.basename(str(inputs[2])).split(".")[0])+"\n"
					if str(self.oas_scene_setup['endnode'])=="":
						result+="\tend "+str(self.oas_last_node_created)+"\n"
					else:
						result+="\tend "+str(self.oas_scene_setup['endnode'])+"\n"
					result+="}\n\n"
					
					for nds in self.oas_rt.keys():
						result+="node "+str(self.oas_rt[nds]['nodetype'])+"\n{\n"
						result+="\tname "+str(self.oas_rt[nds]['name'])+"\n\n"
						for inps in self.oas_rt[nds]['inputs'].keys():
							result+="\t"+str(inps)+" "+str(self.oas_rt[nds]['inputs'][str(inps)]['value'])+"\n"
						result+="}\n\n"
					
					result+="connection\n{\n"
					for cns in self.oas_rt_connections.keys():
						result+="\t"+str(self.oas_rt[str(self.oas_rt_connections[cns]['out_node'])]['name'])+"."+str(self.oas_rt_connections[cns]['out_value'])+" "+str(self.oas_rt[str(self.oas_rt_connections[cns]['in_node'])]['name'])+"."+str(self.oas_rt_connections[cns]['in_value'])+"\n"
					result+="}\n\n"
					
					result+="scene_settings\n{\n"
					for stn in self.oas_scene_setup.keys():
						result+="\t"+str(stn)+" "+str(self.oas_scene_setup[stn])+"\n"
					result+="}\n\n"
					
					file_save=open(str(inputs[2]),"w")
					file_save.write(result)
					file_save.close()
					if mode=="1":
						print "File saved."
					return True
				else:
					if mode=="1":
						print "Wrong path."
					else:
						return False
			#elif....
			else:
				if mode=="1":
					print "Wrong filetype."
				else:
					return False
		else:
			if mode=="1":
				print "Wrong parameters."
			else:
				return False
		
#######################################################################################################################
# file open module
#######################################################################################################################
		
	def oas_file_open(self,mode,inputs):
		if len(inputs)>2:
			if str(inputs[1])=="oas" or str(inputs[1])=="san":
				if os.path.exists(str(inputs[2])):
					files=open(str(inputs[2]),"r")
					readed_content=files.read()
					files.close()
					self.oas_Startup()
					try:
						definepart=str(readed_content.split("define\n{\n")[1].split("}\n")[0]).strip().split("\n")
						for lns in definepart:
							if str(lns.strip().lstrip().split()[0])=="end":
								self.oas_scene_setup['endnode']=str(lns.strip().lstrip().split()[1])
					except:
						if mode=="1":
							print "Wrong file content..."
						return False
					
					try:	
						settingspart=str(readed_content.split("scene_settings\n{\n")[1].split("}\n")[0]).strip().split("\n")		
						for lns in settingspart:
							try:
								self.oas_scene_setup[str(lns.strip().lstrip().split()[0])]=str(lns.strip().lstrip().split()[1])
							except:
								self.oas_scene_setup[str(lns.strip().lstrip().split()[0])]=""
					except:
						if mode=="1":
							print "Wrong file content..."
						return False
					
					ndlist=readed_content.split("\nnode ")
					for x in range(1,len(ndlist)):
						nodetype=ndlist[x].split("}\n")[0].strip().lstrip().split("\n")[0].strip()
						
						if self.oas_node_list.has_key(str(nodetype)):
							iner=ndlist[x].split("}\n")[0].strip().lstrip().split("\n",1)[1].split("{\n")[1].strip().lstrip().split("\n")
							nodename=""
							iss=[]
							for ln in iner:
								if ln.strip().lstrip().split()==[]:
									pass
								else:
									if ln.strip().lstrip().split()[0]=="name":
										nodename=ln.strip().lstrip().split()[1]
									else:
										iss.append([ln.strip().lstrip().split()[0],ln.strip().lstrip().split()[1]])
							creatednode=self.oas_data_create(mode,["create",str(nodetype)])[0]
							if creatednode==0:
								if mode=="1":
									print "Pronlem with: "+str(nodetype)
							else:
								if nodename!="":
									renamereturn=self.oas_data_rename(mode,["rename",creatednode,nodename])
									if renamereturn==0:
										if mode=="1":
											print "Problem during the node creation..."
										nodename=creatednode
								for issl in iss:
									setret=self.oas_data_set(mode,["set",str(nodename+"."+issl[0]),issl[1]])
									if setret==0:
										if mode=="1":
											print "Problem with "+str(nodename+"."+issl[0])
						else:
							if mode=="1":
								print "Unknown nodetype: "+str(nodetype)+" !!!"


					
										
					try:	
						conpart=str(readed_content.split("connection\n{\n")[1].split("}\n")[0]).strip().split("\n")		
						for lns in conpart:
							cret=self.oas_data_connect(mode,["connect",str(lns.strip().lstrip().split()[0]),str(lns.strip().lstrip().split()[1])])      
							if cret==False:
								if mode=="1":
									print "Problem when connectiong nodes."
					except:
						if mode=="1":
							print "Wrong file content..."
						return False
					
					self.oas_save_filename=str(inputs[2])
					return True
				else:
					if mode=="1":
						print "Wrong path."
					else:
						return False
			#elif....
			else:
				if mode=="1":
					print "Wrong filetype."
				else:
					return False
		else:
			if mode=="1":
				print "Wrong parameters."
			else:
				return False

